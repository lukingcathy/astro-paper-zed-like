---
import type { MarkdownHeading } from "astro";
import IconList from "@/assets/icons/IconList.svg";
import TocHeading from "./TocHeading.astro";
export interface HeadingHierarchy extends MarkdownHeading {
  subheadings: HeadingHierarchy[];
}

export interface Props {
  headings: MarkdownHeading[];
}

function buildHeadingHierarchy(
  headings: MarkdownHeading[],
): HeadingHierarchy[] {
  const headingHierarchies: HeadingHierarchy[] = [];
  const headingMap: Map<number, HeadingHierarchy> = new Map();

  if (!headings || headings.length == 0) {
    return headingHierarchies;
  }

  headings.forEach(entry => {
    const heading = { ...entry, subheadings: [] };
    headingMap.set(heading.depth, heading);
    if (heading.depth === 2) {
      headingHierarchies.push(heading);
    } else {
      const headingHierarchy = headingMap.get(heading.depth - 1);
      if (headingHierarchy) {
        headingHierarchy.subheadings.push(heading);
      }
    }
  });

  return headingHierarchies;
}

const { headings } = Astro.props;

const toc = buildHeadingHierarchy(headings);

const hasToc = toc.length > 0;
---

<>
  {
    hasToc && (
      <nav class="flex flex-col flex-wrap items-stretch justify-center gap-1">
        <label class="flex flex-auto flex-row items-center-safe gap-1">
          <IconList />
          <span class="italic">On This Page</span>
        </label>
        <div
          class="mt-2 mb-0 flex h-fit max-h-(--post-sider-toc-height) w-fit max-w-(--post-sider-toc-width) flex-auto flex-row gap-1 overflow-y-auto overflow-x-hidden">
          <div class="border-r-1 pr-5" />
          <ul class="list-none pr-2 pl-1 text-base">
            {toc.map(heading => (
              <TocHeading heading={heading} />
            ))}
          </ul>
        </div>
      </nav>
    )
  }
</>
