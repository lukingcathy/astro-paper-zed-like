---
import type { MarkdownHeading } from "astro";
import TocHeading from "./TocHeading.astro";
export interface HeadingHierarchy extends MarkdownHeading {
  subheadings: HeadingHierarchy[];
}

export interface Props {
  headings: MarkdownHeading[];
  needSmoothScroll?: boolean;
}

function buildHeadingHierarchy(
  headings: MarkdownHeading[]
): HeadingHierarchy[] {
  const headingHierarchies: HeadingHierarchy[] = [];
  const headingMap: Map<number, HeadingHierarchy> = new Map();

  if (!headings || headings.length == 0) {
    return headingHierarchies;
  }

  headings.forEach(entry => {
    const heading = { ...entry, subheadings: [] };
    headingMap.set(heading.depth, heading);
    if (heading.depth === 2) {
      headingHierarchies.push(heading);
    } else {
      const headingHierarchy = headingMap.get(heading.depth - 1);
      if (headingHierarchy) {
        headingHierarchy.subheadings.push(heading);
      }
    }
  });

  return headingHierarchies;
}

const { headings, needSmoothScroll = true } = Astro.props;

const toc = buildHeadingHierarchy(headings);

const hasToc = toc.length > 0;
---

<>
  {
    hasToc && (
      <ul
        id="toc-nav-ul"
        class="list-none overflow-x-hidden overflow-y-auto pr-2 pl-1 text-base"
        data-toc-ul={needSmoothScroll ? "scroll" : "jump"}
      >
        {toc.map(heading => (
          <TocHeading heading={heading} />
        ))}
      </ul>
    )
  }
</>
