---
import type { MarkdownHeading } from "astro";
import IconArrowNarrowUp from "@/assets/icons/IconArrowNarrowUp.svg";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconList from "@/assets/icons/IconList.svg";
import Toc from "./Toc.astro";

export interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;
const hasHeadings = headings.length > 0;
---

<div
  id="btt-btn-container"
  class:list={[
    "fixed right-4 bottom-44 z-40 flex flex-row-reverse justify-between gap-1",
    "md:sticky md:right-auto md:float-end md:mr-1",
    "translate-y-14 opacity-0 transition duration-500",
  ]}
>
  <div class="fixed right-0 bottom-8 flex flex-none flex-col gap-2">
    <button
      data-button="back-to-top"
      class:list={[
        "group relative flex-none bg-background px-2 py-1",
        "size-12 rounded-md shadow-xl",
        "md:h-8 md:w-fit md:rounded-md md:shadow-none md:focus-visible:rounded-none",
        "md:bg-background/35 md:bg-clip-padding md:backdrop-blur-lg",
      ]}
    >
      <span
        id="progress-indicator"
        class="absolute inset-0 -z-10 block size-12 scale-110 rounded-md bg-transparent md:hidden md:h-8 md:rounded-md"
      ></span>
      <IconChevronLeft class="inline-block rotate-90 md:hidden" />
      <span class="sr-only text-sm group-hover:text-accent md:not-sr-only">
        <IconArrowNarrowUp class="inline-block size-4" />
        Back To Top
      </span>
    </button>
    <button
      data-button="show-toc"
      class:list={[
        "group relative flex-none bg-background px-2 py-1",
        "size-12 rounded-md shadow-xl",
        "md:h-8 md:w-fit md:rounded-md md:shadow-none md:focus-visible:rounded-none",
        "md:bg-background/35 md:bg-clip-padding md:backdrop-blur-lg",
      ]}
    >
      <IconList />
    </button>
  </div>
  {
    hasHeadings && (
      <div
        id="btt-toc-container"
        class="fixed right-14 bottom-8 z-50 ml-3 hidden h-fit w-73 max-w-80 flex-auto rounded-md border-2 bg-background text-base shadow-xl"
      >
        <span class="my-1 h-fit w-fit border-dashed pl-1.5">On the pag</span>
        <div class="h-fit w-full pl-2.5 text-wrap">
          <Toc headings={headings} needSmoothScroll={false} />
        </div>
      </div>
    )
  }
</div>

<script is:inline data-astro-rerun>
  /**
   * Scrolls the document to the top when the "Back to Top" button is clicked.
   */
  function backToTop() {
    const rootElement = document.documentElement;
    const btnContainer = document.querySelector("#btt-btn-container");
    const backToTopBtn = document.querySelector("[data-button='back-to-top']");
    const tocContainer = document.querySelector("#btt-toc-container");
    const progressIndicator = document.querySelector("#progress-indicator");

    if (
      !rootElement ||
      !btnContainer ||
      !backToTopBtn ||
      !progressIndicator ||
      !tocContainer
    )
      return;

    // Attach click event handler for back-to-top button
    backToTopBtn.addEventListener("click", () => {
      // For Safari
      document.body.scrollTop = 0;
      // For Chrome, Firefox, IE and Opera
      document.documentElement.scrollTop = 0;
    });

    // Handle button visibility according to scroll position
    let lastVisible = null;

    function handleScroll() {
      const scrollTotal = rootElement.scrollHeight - rootElement.clientHeight;
      const scrollTop = rootElement.scrollTop;
      const scrollPercent = Math.floor((scrollTop / scrollTotal) * 100);

      progressIndicator.style.setProperty(
        "background-image",
        `conic-gradient(var(--accent), var(--accent) ${scrollPercent}%, transparent ${scrollPercent}%)`
      );

      const isVisible = scrollTop / scrollTotal > 0.3;

      if (isVisible !== lastVisible) {
        btnContainer.classList.toggle("opacity-100", isVisible);
        btnContainer.classList.toggle("translate-y-0", isVisible);
        btnContainer.classList.toggle("opacity-0", !isVisible);
        btnContainer.classList.toggle("translate-y-14", !isVisible);
        tocContainer.classList.add("hidden");
        tocContainer.classList.remove(["flex", "flex-col"]);
        lastVisible = isVisible;
      }
    }

    let ticking = false;
    document.addEventListener("scroll", () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    });
    [...document.querySelectorAll("*[data-toc-ul='jump'] a")]
      .map(a => {
        return {
          link: a,
          target: document.querySelector(a.getAttribute("href")),
        };
      })
      .forEach(({ link, target }) => {
        link.addEventListener("click", event => {
          event.preventDefault();
          tocContainer.classList.add("hidden");
          tocContainer.classList.remove(["flex", "flex-col"]);
          const offsetTop = target == null ? 0 : target.offsetTop;
          window.scrollTo({ top: offsetTop, behavior: "smooth" });
        });
      });
  }

  backToTop();

  function showToc() {
    const tocBtn = document.querySelector("[data-button='show-toc']");
    const tocContainer = document.querySelector("#btt-toc-container");
    if (!tocBtn || !tocContainer) {
      return;
    }
    tocBtn.addEventListener("click", () => {
      tocContainer.classList.toggle("hidden");
      tocContainer.classList.toggle("flex");
      tocContainer.classList.toggle("flex-col");
    });
  }

  showToc();
</script>
