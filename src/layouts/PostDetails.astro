---
import { render, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import PageLayout from "@/layouts/PageLayout.astro";
import Tag from "@/components/Tag.astro";
import SidebarToc from "@/components/SidebarToc.astro";
import Datetime from "@/components/Datetime.astro";
import EditPost from "@/components/EditPost.astro";
import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import FloatButton from "@/components/FloatButton.astro";
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";
import IconArrowBigUpLines from "@/assets/icons/IconArrowBigUpLines.svg";
import IconAlignLeft2 from "@/assets/icons/IconAlignLeft2.svg";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import IconHome from "@/assets/icons/IconHome.svg";
import IconSearch from "@/assets/icons/IconSearch.svg";
import IconTags from "@/assets/icons/IconTags.svg";
import { SITE } from "@/config";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags,
  hideEditPost,
} = post.data;

const { Content, headings } = await render(post);

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  ogImageUrl = `${getPath(post.id, post.filePath)}/index.png`;
}

// Resolve OG image URL (or fallback to SITE.ogImage / default `og.png`)
const ogImage = ogImageUrl
  ? new URL(ogImageUrl, Astro.url.origin).href
  : undefined;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
};

/* ========== Prev/Next Posts ========== */

const allPosts = posts.map(({ data: { title }, id, filePath }) => ({
  id,
  title,
  filePath,
}));

const currentPostIndex = allPosts.findIndex(a => a.id === post.id);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;
---

<Layout {...layoutProps}>
  <PageLayout>
    <div
      class="relative flex flex-col justify-center-safe"
      id="post-main-content"
      slot="main-body-slot"
    >
      <div class="relative px-2 py-6 md:px-6 md:py-8">
        <div
          class="absolute bottom-[-4.5px] left-[-4.5px] z-50 h-2 w-2 rotate-45 rounded-[1px] border border-blue-200 bg-white dark:border-blue-300/25"
        >
        </div>
        <div
          class="absolute right-[-4.5px] bottom-[-4.5px] z-50 h-2 w-2 rotate-45 rounded-[1px] border border-blue-200 bg-white dark:border-blue-300/25"
        >
        </div>
        <div id="post-header" class="my-4 w-full bg-background">
          <BackButton />
          <div
            class:list={[
              "mx-auto px-4 pt-2 md:mx-3",
              { "mt-8": !SITE.showBackButton },
            ]}
            data-pagefind-title
          >
            <h1
              transition:name={slugifyStr(title)}
              class="inline-block text-2xl font-bold text-accent sm:text-3xl"
            >
              {title}
            </h1>
            <div class="flex items-center gap-4">
              <Datetime
                {pubDatetime}
                {modDatetime}
                {timezone}
                size="lg"
                class="my-2"
              />
              <EditPost class="max-sm:hidden" {hideEditPost} {post} />
            </div>
          </div>
        </div>
      </div>
      <div class="-mx-3 flex items-center justify-center md:-mx-8 lg:-mx-12">
        <hr class="w-full border-t" />
      </div>
      <div
        id="post-body"
        class:list={[
          "relative mt-8 bg-background px-6 md:mx-3 md:px-8",
          { "mt-10": !SITE.showBackButton },
        ]}
      >
        <div
          class="relative flex w-full flex-auto flex-row gap-4 overflow-x-auto"
        >
          <article
            id="article"
            class="md:shark app-prose w-fit basis-auto sm:prose-sm md:h-lvh md:max-w-none md:grow md:basis-9/12 md:overflow-y-auto md:pr-3 lg:prose-lg xl:prose-xl dark:prose-invert prose-pre:bg-(--shiki-light-bg) dark:prose-pre:bg-(--shiki-dark-bg)"
          >
            <Content />
          </article>
          <aside
            id="post-sidebar"
            class="hidden md:sticky md:top-[calc(10%+var(--header-height))] md:z-40 md:float-right md:ml-6 md:flex md:flex-none md:basis-3/12 md:flex-col md:gap-1"
          >
            <SidebarToc headings={headings} />
            <hr class="my-6 w-2/3 border-dashed md:w-11/12" />
            <ShareLinks />
            <hr class="my-6 w-2/3 border-dashed md:w-11/12" />
            <div
              class="flex flex-col flex-wrap items-center justify-center gap-1 sm:items-start"
            >
              <label class="flex flex-auto flex-row items-center-safe gap-1">
                <IconTags />
                <span class="italic">Tags</span>
              </label>
              <ul>
                {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
              </ul>
            </div>
            <hr class="my-6 w-2/3 border-dashed md:w-11/12" />
            <div
              class="flex flex-col flex-wrap items-center justify-center gap-1 sm:items-start"
            >
              <label class="flex flex-auto flex-row items-center-safe gap-1">
                <IconAlignLeft2 />
                <span class="italic">Shortcuts</span>
              </label>
              <div class="flex flex-row items-start gap-4">
                <button
                  id="back-to-top-sidebar"
                  class="focus-outline py-1 whitespace-nowrap hover:opacity-75"
                >
                  <IconArrowBigUpLines />
                </button>
                <button
                  class="focus-outline py-1 whitespace-nowrap hover:opacity-75"
                >
                  <a href="/">
                    <IconHome />
                  </a>
                </button>
                <button
                  class="focus-outline py-1 whitespace-nowrap hover:opacity-75"
                  data-search-btn
                >
                  <IconSearch />
                </button>
                <button
                  class="focus-outline py-1 whitespace-nowrap hover:opacity-75"
                >
                  <EditPost {hideEditPost} {post} hideText={true} />
                </button>
              </div>
            </div>
          </aside>
        </div>
      </div>
      <div class="relative px-2 py-6 sm:hidden md:px-6 md:py-8">
        <div
          class="absolute bottom-[-4.5px] left-[-4.5px] z-50 h-2 w-2 rotate-45 rounded-[1px] border border-blue-200 bg-white dark:border-blue-300/25"
        >
        </div>
        <div
          class="absolute right-[-4.5px] bottom-[-4.5px] z-50 h-2 w-2 rotate-45 rounded-[1px] border border-blue-200 bg-white dark:border-blue-300/25"
        >
        </div>
      </div>
      <div
        class="-mx-3 flex items-center justify-center sm:hidden md:-mx-8 lg:-mx-12"
      >
        <hr class="w-full border-t" />
      </div>
      <div class="relative px-2 py-6 md:px-6 md:py-8">
        <div
          class="absolute bottom-[-4.5px] left-[-4.5px] z-50 h-2 w-2 rotate-45 rounded-[1px] border border-blue-200 bg-white dark:border-blue-300/25"
        >
        </div>
        <div
          class="absolute right-[-4.5px] bottom-[-4.5px] z-50 h-2 w-2 rotate-45 rounded-[1px] border border-blue-200 bg-white dark:border-blue-300/25"
        >
        </div>
        <div class="sm:hidden">
          <EditPost {hideEditPost} {post} />
          <FloatButton headings={headings} />
          <ul class="mt-4 mb-8 sm:my-8">
            {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
          </ul>
          <ShareLinks />
        </div>
      </div>
      <div class="-mx-3 flex items-center justify-center md:-mx-8 lg:-mx-12">
        <hr class="w-full border-t" />
      </div>
      <div class="relative px-2 py-6 pb-2 md:px-6 md:py-8">
        <!-- Previous/Next Post Buttons -->
        <div
          class="grid grid-cols-1 gap-6 py-6 text-lg sm:grid-cols-2"
          data-pagefind-ignore
        >
          {
            prevPost && (
              <a
                href={getPath(prevPost.id, prevPost.filePath)}
                class="flex w-full gap-1 hover:-top-0.5 hover:text-accent/85 focus-visible:p-1"
              >
                <IconChevronLeft class="inline-block size-12 flex-none justify-center" />
                <div>
                  <span>Previous Post</span>
                  <div class="text-sm text-accent/85">{prevPost.title}</div>
                </div>
              </a>
            )
          }
          {
            nextPost && (
              <a
                href={getPath(nextPost.id, nextPost.filePath)}
                class="flex w-full justify-end gap-1 text-right hover:-top-0.5 hover:text-accent/85 focus-visible:p-1 sm:col-start-2"
              >
                <div>
                  <span>Next Post</span>
                  <div class="text-sm text-accent/85">{nextPost.title}</div>
                </div>
                <IconChevronRight class="inline-block size-12 flex-none justify-center" />
              </a>
            )
          }
        </div>
      </div>
    </div>
  </PageLayout>
</Layout>

<script is:inline data-astro-rerun>
  /**
   * Create a progress indicator at the top
   */
  function createProgressBar() {
    const article = document.querySelector("#article");
    const navContainer = document.querySelector("#nav-container");
    const mediaQuery = window.matchMedia("(max-width: 640px)");

    if (!article || !navContainer) {
      return;
    }

    if (mediaQuery.matches) {
      return;
    }

    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed z-50 top-0 left-0 h-1 w-full bg-background";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    navContainer.appendChild(progressContainer);
  }

  createProgressBar();

  /**
   * Update the progress bar when user scrolls
   */
  function updateScrollProgress() {
    const article = document.querySelector("#article");
    const mediaQuery = window.matchMedia("(max-width: 640px)");

    if (!article) {
      return;
    }

    if (mediaQuery.matches) {
      return;
    }

    article.addEventListener("scroll", () => {
      const winScroll = article.scrollTop;
      const height = article.scrollHeight - article.clientHeight;
      const scrolled = (winScroll / height) * 100;
      if (document) {
        const myBar = document.getElementById("myBar");
        if (myBar) {
          myBar.style.width = scrolled + "%";
        }
      }
    });
  }

  updateScrollProgress();

  /**
   * Attaches links to headings in the document, allowing sharing of sections easily
   */
  function addHeadingLinks() {
    const headings = Array.from(
      document.querySelectorAll("h2, h3, h4, h5, h6")
    );
    for (const heading of headings) {
      heading.classList.add("group");
      const link = document.createElement("a");
      link.className =
        "heading-link ml-2 opacity-0 group-hover:opacity-100 focus:opacity-100";
      link.href = "#" + heading.id;

      const span = document.createElement("span");
      span.ariaHidden = "true";
      span.innerText = "#";
      link.appendChild(span);
      heading.appendChild(link);
    }
  }

  addHeadingLinks();

  /**
   * Attaches copy buttons to code blocks in the document, allowing users to copy code easily.
   */
  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    const codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (const codeBlock of codeBlocks) {
      if (codeBlock.hasAttribute("data-mermaid-src")) {
        continue;
      }
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      const copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 top-3 rounded bg-muted px-2 py-1 text-base leading-4 text-foreground font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap code bock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      const code = block.querySelector("code");
      const text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }

  attachCopyButtons();

  /**
   * Scrolls the document to the top when the "Back to Top" button is clicked.
   */
  function backToTopSidebar() {
    document
      .querySelector("#back-to-top-sidebar")
      ?.addEventListener("click", () => {
        const article = document.getElementById("article");
        const tocNavUl = document.getElementById("toc-nav-ul");
        if (article) {
          article.scrollTo({
            top: 0,
            left: 0,
            behavior: "smooth",
          });
        }
        if (tocNavUl) {
          tocNavUl.scrollTop = 0;
        }
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
      });
  }

  backToTopSidebar();

  function smoothScrollAndPositionSync() {
    const article = document.getElementById("article");

    if (!article) {
      return;
    }

    const tocLinks = [...document.querySelectorAll("*[data-toc-ul] a")].map(
      a => {
        return {
          link: a,
          target: document.querySelector(a.getAttribute("href")),
        };
      }
    );

    const targetsObserver = new IntersectionObserver(targets => {
      targets.forEach(entry => {
        const href = entry.target.getAttribute("id");
        const link = document.querySelector(
          `*[data-toc-ul] a[href="#${href}"]`
        );

        if (!link) {
          return;
        }

        const op = entry.intersectionRatio > 0 ? "add" : "remove";
        link.classList[op]("text-wrap");
        link.classList[op]("text-(--accent)");
        link.scrollIntoView({ behavior: "smooth", block: "nearest" });
      });
    });

    tocLinks.forEach(({ link, target }) => {
      link.addEventListener("click", event => {
        event.preventDefault();
        const offsetTop = target == null ? 0 : target.offsetTop;
        window.scrollTo({ top: 0 });
        article.scrollTo({ top: offsetTop, behavior: "smooth" });
      });
      targetsObserver.observe(target);
    });
  }

  smoothScrollAndPositionSync();

  /**
   * Go to page start after page swap
   */
  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" })
  );
</script>

<script src="../scripts/render-diagrams.ts"></script>
